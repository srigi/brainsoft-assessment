/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Height: { // root type
    maximum?: string | null; // String
    minimum?: string | null; // String
  }
  Pokemon: { // root type
    classification: string; // String!
    fleeRate: number; // Float!
    height: NexusGenRootTypes['Height']; // Height!
    id: string; // String!
    maxCP: number; // Float!
    maxHP: number; // Float!
    name: string; // String!
    types?: Array<string | null> | null; // [String]
    weight: NexusGenRootTypes['Weight']; // Weight!
  }
  PokemonListPageInfo: { // root type
    nextCursor?: string | null; // String
    pageSize?: number | null; // Int
  }
  PokemonsList: { // root type
    edges?: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
    pageInfo?: NexusGenRootTypes['PokemonListPageInfo'] | null; // PokemonListPageInfo
    totalCount?: number | null; // Int
  }
  Query: {};
  Weight: { // root type
    maximum?: string | null; // String
    minimum?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Height: { // field return type
    maximum: string | null; // String
    minimum: string | null; // String
  }
  Pokemon: { // field return type
    classification: string; // String!
    fleeRate: number; // Float!
    height: NexusGenRootTypes['Height']; // Height!
    id: string; // String!
    maxCP: number; // Float!
    maxHP: number; // Float!
    name: string; // String!
    types: Array<string | null> | null; // [String]
    weight: NexusGenRootTypes['Weight']; // Weight!
  }
  PokemonListPageInfo: { // field return type
    nextCursor: string | null; // String
    pageSize: number | null; // Int
  }
  PokemonsList: { // field return type
    edges: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
    pageInfo: NexusGenRootTypes['PokemonListPageInfo'] | null; // PokemonListPageInfo
    totalCount: number | null; // Int
  }
  Query: { // field return type
    healthy: boolean; // Boolean!
    pokemon: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    pokemons: NexusGenRootTypes['PokemonsList'] | null; // PokemonsList
  }
  Weight: { // field return type
    maximum: string | null; // String
    minimum: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Height: { // field return type name
    maximum: 'String'
    minimum: 'String'
  }
  Pokemon: { // field return type name
    classification: 'String'
    fleeRate: 'Float'
    height: 'Height'
    id: 'String'
    maxCP: 'Float'
    maxHP: 'Float'
    name: 'String'
    types: 'String'
    weight: 'Weight'
  }
  PokemonListPageInfo: { // field return type name
    nextCursor: 'String'
    pageSize: 'Int'
  }
  PokemonsList: { // field return type name
    edges: 'Pokemon'
    pageInfo: 'PokemonListPageInfo'
    totalCount: 'Int'
  }
  Query: { // field return type name
    healthy: 'Boolean'
    pokemon: 'Pokemon'
    pokemons: 'PokemonsList'
  }
  Weight: { // field return type name
    maximum: 'String'
    minimum: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    pokemon: { // args
      findById?: string | null; // String
      findByName?: string | null; // String
    }
    pokemons: { // args
      cursor?: string | null; // String
      findByName?: string | null; // String
      pageSize?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}